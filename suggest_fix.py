# suggest_fix.py
# ‚úÖ G·ª£i √Ω t·ªëi ∆∞u h√≥a truy v·∫•n SQL d·ª±a tr√™n ƒë·∫∑c tr∆∞ng ƒë√£ khai ph√°
# ‚úÖ Phi√™n b·∫£n m·ªü r·ªông b√°m s√°t c√°c feature m·ªõi
"""
Sinh g·ª£i √Ω t·ªëi ∆∞u ho√° cho m·ªôt truy v·∫•n d·ª±a tr√™n ƒë·∫∑c tr∆∞ng v√† model ƒë√£ train.

C√°ch d√πng:
- L·∫•y truy v·∫•n t·ª´ `query_log.csv` theo id ho·∫∑c t√¨m g·∫ßn ƒë√∫ng (USE_FROM_LOG=True).
- Ho·∫∑c nh·∫≠p tay m·ªôt b·ªô ƒë·∫∑c tr∆∞ng t·ªëi thi·ªÉu t∆∞∆°ng th√≠ch `model_features.pkl`.

K·∫øt qu·∫£ in ra m√†n h√¨nh, ƒë·ªìng th·ªùi l∆∞u t√≥m t·∫Øt v√†o `figures/suggest_summary.csv`
v√† chi ti·∫øt t·ª´ng truy v·∫•n v√†o `figures/suggest_detail.txt`.
"""

import pandas as pd
import joblib
import os
import difflib
import csv

# ==== 1. Ki·ªÉm tra m√¥ h√¨nh ƒë√£ hu·∫•n luy·ªán ====
if not os.path.exists("slow_query_model.pkl") or not os.path.exists("model_features.pkl"):
    print("‚ùå Kh√¥ng t√¨m th·∫•y m√¥ h√¨nh. H√£y ch·∫°y train_model.py tr∆∞·ªõc.")
    exit(1)

model = joblib.load("slow_query_model.pkl")
features = joblib.load("model_features.pkl")

# ==== 2. Ch·ªçn c√°ch nh·∫≠p truy v·∫•n ====
USE_FROM_LOG = True  # üëà ƒê·ªïi th√†nh False n·∫øu mu·ªën nh·∫≠p tay

if USE_FROM_LOG:
    if not os.path.exists("query_log.csv"):
        print("‚ùå Kh√¥ng t√¨m th·∫•y file query_log.csv. H√£y ch·∫°y log_queries.py tr∆∞·ªõc.")
        exit(1)

    df = pd.read_csv("query_log.csv")
    df = df[df['status'] == 'OK'].copy()

    print("\nüìù C√≥", len(df), "truy v·∫•n trong log. B·∫°n c√≥ th·ªÉ:")
    print(" - Nh·∫≠p query_id (s·ªë d√≤ng t·ª´ 0)")
    print(" - Ho·∫∑c nh·∫≠p chu·ªói g·∫ßn ƒë√∫ng ƒë·ªÉ t√¨m truy v·∫•n")

    user_input = input("üîç Nh·∫≠p query_id ho·∫∑c m·ªôt ph·∫ßn truy v·∫•n: ").strip()

    try:
        idx = int(user_input)
        query_row = df.iloc[idx]
    except ValueError:
        matches = difflib.get_close_matches(user_input, df['query_raw'].astype(str), n=1)
        if not matches:
            print("‚ùå Kh√¥ng t√¨m th·∫•y truy v·∫•n ph√π h·ª£p.")
            exit(1)
        query_row = df[df['query_raw'] == matches[0]].iloc[0]

    print("\nüîé Truy v·∫•n ƒë∆∞·ª£c ch·ªçn:")
    print(query_row['query_raw'])

    query_features = {col: query_row[col] if col in query_row else 0 for col in features}
    raw_query = query_row['query_raw']

else:
    # ==== Nh·∫≠p tay ƒë·∫∑c tr∆∞ng ====
    raw_query = "[Nh·∫≠p tay]"
    # √ù nghƒ©a ƒë·∫∑c tr∆∞ng t∆∞∆°ng t·ª± predict_demo.py; ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch v·ªõi model_features.pkl
    query_features = {
        'rows_examined': 50000,
        'uses_index': 0,
        'num_tables': 3,
        'num_predicates': 5,
        'num_subqueries': 2,
        'has_like': 1,
        'has_group': 1,
        'has_join': 1,
        'has_order': 1,
        'has_limit': 0,
        'has_distinct': 1,
        'has_function': 1,
        'ALL': 1, 'index': 0, 'ref': 0, 'const': 0, 'eq_ref': 0
    }

    for f in features:
        if f not in query_features:
            query_features[f] = 0

# ==== 3. D·ª± ƒëo√°n ====
X = pd.DataFrame([query_features])[features]
result = model.predict(X)[0]
proba = model.predict_proba(X)[0][1]

print(f"\nüìà X√°c su·∫•t truy v·∫•n b·ªã ch·∫≠m: {proba:.2%}")
print("üì¢ D·ª± ƒëo√°n:", "‚ùå Truy v·∫•n CH·∫¨M" if result else "‚úÖ Truy v·∫•n NHANH")

# ==== 4. G·ª£i √Ω t·ªëi ∆∞u h√≥a n·∫øu ch·∫≠m ====
suggestions = []

if result:
    print("\nüí° G·ª¢I √ù C·∫¢I TI·∫æN TRUY V·∫§N:")

    if query_features.get('uses_index', 1) == 0:
        msg = "- üîç Truy v·∫•n kh√¥ng s·ª≠ d·ª•ng ch·ªâ m·ª•c. C√¢n nh·∫Øc th√™m INDEX ho·∫∑c COVERING INDEX."
        print(msg)
        suggestions.append(msg)

    if query_features.get('has_join'):
        msg = "- üîÑ JOIN nhi·ªÅu b·∫£ng: ki·ªÉm tra index tr√™n kh√≥a ngo·∫°i, tr√°nh JOIN th·ª´a."
        print(msg)
        suggestions.append(msg)

    if query_features.get('has_like'):
        msg = "- üî† LIKE '%...%': g√¢y full-scan. D√πng FULLTEXT INDEX ho·∫∑c ElasticSearch."
        print(msg)
        suggestions.append(msg)

    if query_features.get('has_group'):
        msg = "- üìä GROUP BY: th√™m index ho·∫∑c d√πng pre-aggregated table."
        print(msg)
        suggestions.append(msg)

    if query_features.get('has_order') and not query_features.get('has_limit'):
        msg = "- ü™ô ORDER BY kh√¥ng c√≥ LIMIT: n√™n th√™m LIMIT ho·∫∑c index ph√π h·ª£p."
        print(msg)
        suggestions.append(msg)

    # C√°c ng∆∞·ª°ng d∆∞·ªõi ƒë√¢y l√† kinh nghi·ªám/ƒëi·ªÉm g·ª£i √Ω, c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh theo d·ªØ li·ªáu
    if query_features.get('rows_examined', 0) > 20000:
        msg = "- üß± Qu√©t qu√° nhi·ªÅu d√≤ng. Th√™m ƒëi·ªÅu ki·ªán WHERE, partition table ho·∫∑c index."
        print(msg)
        suggestions.append(msg)

    if query_features.get('num_predicates', 0) > 5:
        msg = "- üßÆ Qu√° nhi·ªÅu ƒëi·ªÅu ki·ªán WHERE: xem x√©t t·ªëi ∆∞u filter ho·∫∑c t√°ch truy v·∫•n."
        print(msg)
        suggestions.append(msg)

    if query_features.get('num_subqueries', 0) > 1:
        msg = "- üîÅ Subquery l·ªìng nhau: thay b·∫±ng JOIN ho·∫∑c WITH (CTE)."
        print(msg)
        suggestions.append(msg)

    if query_features.get('has_function', 0) == 1:
        msg = "- üìê H√†m tr√™n c·ªôt (VD: YEAR(date)): tr√°nh ƒë·ªÉ index c√≥ t√°c d·ª•ng."
        print(msg)
        suggestions.append(msg)

else:
    print("\n‚úÖ Truy v·∫•n ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u. Kh√¥ng c·∫ßn c·∫£i ti·∫øn.")

# ==== 5. L∆∞u k·∫øt qu·∫£ ra file ====
os.makedirs("figures", exist_ok=True)

# L∆∞u d·∫°ng CSV append nhi·ªÅu truy v·∫•n
result_path = "figures/suggest_summary.csv"
file_exists = os.path.exists(result_path)

with open(result_path, "a", newline='', encoding="utf-8") as f:
    writer = csv.writer(f)
    if not file_exists:
        writer.writerow(["Truy v·∫•n", "X√°c su·∫•t ch·∫≠m", "K·∫øt lu·∫≠n", "G·ª£i √Ω"])
    writer.writerow([
        raw_query[:100] + "..." if len(raw_query) > 100 else raw_query,
        f"{proba:.2%}",
        "CH·∫¨M" if result else "NHANH",
        "; ".join(suggestions) if suggestions else "Kh√¥ng c·∫ßn c·∫£i ti·∫øn"
    ])

print(f"\nüìù ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o: {result_path}")

# ==== 6. L∆∞u chi ti·∫øt t·ª´ng truy v·∫•n ====
detail_path = "figures/suggest_detail.txt"
with open(detail_path, "a", encoding="utf-8") as f:
    f.write("\n===========================\n")
    f.write("Truy v·∫•n ƒë∆∞·ª£c ph√¢n t√≠ch:\n")
    f.write(raw_query + "\n\n")
    f.write(f"X√°c su·∫•t ch·∫≠m: {proba:.2%}\n")
    f.write(f"K·∫øt lu·∫≠n: {'CH·∫¨M' if result else 'NHANH'}\n\n")
    if suggestions:
        f.write("C√°c g·ª£i √Ω t·ªëi ∆∞u:\n")
        for s in suggestions:
            f.write(f"- {s}\n")
    else:
        f.write("Kh√¥ng c·∫ßn c·∫£i ti·∫øn.\n")
