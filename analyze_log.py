# analyze_log.py
# ‚úÖ Ph√¢n t√≠ch v√† tr·ª±c quan h√≥a log truy v·∫•n SQL - b·∫£n m·ªü r·ªông cho m√¥n AI n√¢ng cao
"""
T·∫≠p l·ªánh t·∫°o b·∫£ng s·ªë li·ªáu v√† bi·ªÉu ƒë·ªì t·ª´ `query_log.csv` ƒë·ªÉ ph·ª•c v·ª• b√°o c√°o.

Ch·ª©c nƒÉng ch√≠nh:
- L·ªçc b·∫£n ghi h·ª£p l·ªá (status = OK), ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc.
- L∆∞u m·∫´u d·ªØ li·ªáu, ph√¢n ph·ªëi nh√£n, th·ªëng k√™ m√¥ t·∫£.
- V·∫Ω histogram, boxplot theo c√∫ ph√°p SQL v√† ƒë·∫∑c tr∆∞ng s·ªë; scatter, heatmap t∆∞∆°ng quan.
- Xu·∫•t top 10 truy v·∫•n ch·∫≠m v√† t·∫ßn su·∫•t t·ª´ kho√° SQL ph·ªï bi·∫øn.

ƒê·∫ßu v√†o: `query_log.csv` (t·∫°o b·ªüi `log_queries.py`).
ƒê·∫ßu ra: file CSV/PNG trong th∆∞ m·ª•c `figures/`.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import warnings
from collections import Counter
import re

warnings.filterwarnings("ignore")

# ==== 1. ƒê·ªçc d·ªØ li·ªáu truy v·∫•n t·ª´ file ====
log_path = "query_log.csv"
if not os.path.exists(log_path):
    raise FileNotFoundError(f"‚ùå File {log_path} kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y log_queries.py tr∆∞·ªõc.")

df = pd.read_csv(log_path)

# ==== 2. L√†m s·∫°ch d·ªØ li·ªáu ====
if 'status' in df.columns:
    df = df[df['status'] == 'OK'].copy()

# ==== 3. Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc ====
required_cols = ['exec_time_sec', 'rows_examined', 'uses_index', 'num_tables', 'is_slow']
missing_cols = [col for col in required_cols if col not in df.columns]
if missing_cols:
    raise ValueError(f"‚ùå Thi·∫øu c·ªôt b·∫Øt bu·ªôc trong d·ªØ li·ªáu: {missing_cols}")

# üîß ƒê·∫£m b·∫£o th∆∞ m·ª•c l∆∞u h√¨nh ·∫£nh v√† file CSV t·ªìn t·∫°i
os.makedirs("figures", exist_ok=True)

# ==== 3b. L∆∞u m·∫´u d·ªØ li·ªáu log ƒë·ªÉ ch√®n v√†o b√°o c√°o ====
df.head(10).to_csv("figures/sample_query_log.csv", index=False)

# ==== 3c. Ph√¢n ph·ªëi nh√£n nhanh/ch·∫≠m ====
df["is_slow"].value_counts().to_csv("figures/label_distribution.csv")

# ==== 4. Th·ªëng k√™ t·ªïng quan ====
df.describe(include='all').to_csv("figures/statistics_summary.csv")

# ==== 5. Bi·ªÉu ƒë·ªì ph√¢n ph·ªëi th·ªùi gian th·ª±c thi ====
plt.figure(figsize=(8, 4))
sns.histplot(df['exec_time_sec'], bins=20, kde=True, color='skyblue')
plt.title("Ph√¢n ph·ªëi th·ªùi gian th·ª±c thi truy v·∫•n")
plt.savefig("figures/hist_exec_time.png")
plt.close()

# ==== 6. Ph√¢n ph·ªëi s·ªë d√≤ng ƒë∆∞·ª£c qu√©t ====
plt.figure(figsize=(8, 4))
sns.histplot(df['rows_examined'], bins=30, kde=True, color='salmon')
plt.title("Ph√¢n ph·ªëi s·ªë d√≤ng ƒë∆∞·ª£c qu√©t")
plt.savefig("figures/hist_rows_examined.png")
plt.close()

# ==== 7. Boxplot theo c√∫ ph√°p SQL ====
# C√°c c·ªôt c√∫ ph√°p v√† √Ω nghƒ©a (0/1):
# - has_like: d√πng LIKE (ƒë·∫∑c bi·ªát '%...%') d·ªÖ g√¢y full-scan
# - has_group: c√≥ GROUP BY
# - has_join: c√≥ JOIN (nhi·ªÅu b·∫£ng)
# - has_order: c√≥ ORDER BY
# - has_limit: c√≥ LIMIT (th∆∞·ªùng gi·∫£m kh·ªëi l∆∞·ª£ng k·∫øt qu·∫£)
# - has_distinct: c√≥ DISTINCT (lo·∫°i tr√πng c√≥ th·ªÉ t·ªën chi ph√≠)
# - has_function: d√πng h√†m tr√™n c·ªôt (YEAR/LOWER/...) c√≥ th·ªÉ v√¥ hi·ªáu ho√° index
syntax_cols = ['has_like', 'has_group', 'has_join', 'has_order', 'has_limit', 'has_distinct', 'has_function']
for col in syntax_cols:
    if col in df.columns:
        plt.figure(figsize=(6, 4))
        sns.boxplot(data=df, x=col, y='exec_time_sec', palette="Set2")
        plt.title(f"·∫¢nh h∆∞·ªüng c·ªßa {col} ƒë·∫øn th·ªùi gian truy v·∫•n")
        plt.savefig(f"figures/box_{col}.png")
        plt.close()

# ==== 8. Ph√¢n t√≠ch feature m·ªõi ====
# M·ªôt v√†i ƒë·∫∑c tr∆∞ng s·ªë m·ªü r·ªông v√† √Ω nghƒ©a:
# - num_predicates: s·ªë ƒëi·ªÅu ki·ªán WHERE/AND/OR ‚Üí ph·ª©c t·∫°p l·ªçc
# - num_subqueries: s·ªë subquery l·ªìng ‚Üí tƒÉng chi ph√≠
extra_numeric = ['num_predicates', 'num_subqueries']
for col in extra_numeric:
    if col in df.columns:
        plt.figure(figsize=(6, 4))
        sns.boxplot(data=df, x=col, y='exec_time_sec', palette="muted")
        plt.title(f"·∫¢nh h∆∞·ªüng c·ªßa {col} ƒë·∫øn th·ªùi gian truy v·∫•n")
        plt.savefig(f"figures/box_{col}.png")
        plt.close()

# ==== 9. Scatter plot: s·ªë d√≤ng qu√©t vs th·ªùi gian ====
plt.figure(figsize=(7, 5))
sns.scatterplot(data=df, x="rows_examined", y="exec_time_sec", hue="is_slow", palette="coolwarm")
plt.title("M·ªëi quan h·ªá gi·ªØa rows_examined v√† exec_time_sec")
plt.savefig("figures/scatter_rows_vs_time.png")
plt.close()

# ==== 10. Heatmap t∆∞∆°ng quan ====
numeric_cols = ['exec_time_sec', 'exec_time_log', 'rows_examined', 'uses_index', 
                'num_tables', 'num_predicates', 'num_subqueries'] + syntax_cols
numeric_cols = [c for c in numeric_cols if c in df.columns]

plt.figure(figsize=(12, 8))
sns.heatmap(df[numeric_cols].corr(), annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c tr∆∞ng")
plt.savefig("figures/heatmap_correlation.png")
plt.close()

# ==== 11. Bi·ªÉu ƒë·ªì ph√¢n b·ªë nhanh/ch·∫≠m ====
plt.figure(figsize=(5, 5))
df["is_slow"].value_counts().plot.pie(
    autopct="%.1f%%", labels=["Nhanh (0)", "Ch·∫≠m (1)"], colors=["#8fd694", "#f28b82"]
)
plt.title("T·ªâ l·ªá truy v·∫•n nhanh v√† ch·∫≠m")
plt.savefig("figures/pie_is_slow.png")
plt.close()

# ==== 12. Top 10 truy v·∫•n ch·∫≠m nh·∫•t ====
if "query_raw" in df.columns:
    top10 = df.sort_values("exec_time_sec", ascending=False).head(10)
    top10.to_csv("figures/top10_slow_queries.csv", index=False)

    plt.figure(figsize=(10, 6))
    sns.barplot(data=top10, x="exec_time_sec", y="query_raw", palette="Reds_r")
    plt.xlabel("Th·ªùi gian (gi√¢y)")
    plt.ylabel("Truy v·∫•n (r√∫t g·ªçn)")
    plt.yticks(ticks=range(len(top10)), labels=[q[:50]+"..." for q in top10["query_raw"]])
    plt.title("Top 10 truy v·∫•n ch·∫≠m nh·∫•t")
    plt.savefig("figures/bar_top10_slow_queries.png")
    plt.close()

# ==== 13. T·∫ßn su·∫•t t·ª´ kh√≥a SQL ====
if "query_raw" in df.columns:
    all_tokens = []
    for q in df["query_raw"]:
        tokens = re.findall(r'\b(select|from|join|where|group by|order by|limit|distinct|like)\b', q.lower())
        all_tokens.extend(tokens)

    keyword_counts = Counter(all_tokens).most_common(10)
    pd.DataFrame(keyword_counts, columns=["keyword", "count"]).to_csv("figures/keyword_frequency.csv", index=False)

    plt.figure(figsize=(8, 4))
    sns.barplot(x=[k for k, _ in keyword_counts], y=[c for _, c in keyword_counts], palette='viridis')
    plt.title("Top t·ª´ kh√≥a SQL ph·ªï bi·∫øn nh·∫•t")
    plt.savefig("figures/keyword_frequency.png")
    plt.close()

print("\n‚úÖ ƒê√£ ho√†n t·∫•t ph√¢n t√≠ch log. T·∫•t c·∫£ bi·ªÉu ƒë·ªì v√† b·∫£ng n·∫±m trong th∆∞ m·ª•c figures/")
