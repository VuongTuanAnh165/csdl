# analyze_log.py
# ‚úÖ Ph√¢n t√≠ch v√† tr·ª±c quan h√≥a log truy v·∫•n SQL - ph·ª•c v·ª• m√¥n Khai ph√° d·ªØ li·ªáu ti√™n ti·∫øn

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import os
import warnings
from collections import Counter
import re

warnings.filterwarnings("ignore")

# ==== 1. ƒê·ªçc d·ªØ li·ªáu truy v·∫•n t·ª´ file ====
log_path = "query_log.csv"
if not os.path.exists(log_path):
    raise FileNotFoundError(f"‚ùå File {log_path} kh√¥ng t·ªìn t·∫°i. H√£y ch·∫°y log_queries.py tr∆∞·ªõc.")

df = pd.read_csv(log_path)

# ==== 2. L√†m s·∫°ch d·ªØ li·ªáu ====
if 'status' in df.columns:
    df = df[df['status'] == 'OK'].copy()

# ==== 3. Ki·ªÉm tra c·ªôt b·∫Øt bu·ªôc ====
required_cols = ['exec_time_sec', 'rows_examined', 'uses_index', 'num_tables', 'is_slow']
missing_cols = [col for col in required_cols if col not in df.columns]
if missing_cols:
    raise ValueError(f"‚ùå Thi·∫øu c·ªôt b·∫Øt bu·ªôc trong d·ªØ li·ªáu: {missing_cols}")

# ==== 4. M√¥ t·∫£ t·ªïng quan ====
print("üìä T·ªïng s·ªë truy v·∫•n h·ª£p l·ªá:", len(df))
print("\nüìå T·ªïng quan d·ªØ li·ªáu s·ªë:")
print(df.describe(include='all'))

# ==== 5. T·∫°o th∆∞ m·ª•c l∆∞u h√¨nh ·∫£nh ====
os.makedirs("figures", exist_ok=True)

# ==== 6. Ph√¢n ph·ªëi th·ªùi gian th·ª±c thi ====
plt.figure(figsize=(8, 4))
sns.histplot(df['exec_time_sec'], bins=20, kde=True, color='skyblue')
plt.title("Ph√¢n ph·ªëi th·ªùi gian th·ª±c thi truy v·∫•n")
plt.xlabel("Th·ªùi gian (gi√¢y)")
plt.ylabel("S·ªë l∆∞·ª£ng truy v·∫•n")
plt.tight_layout()
plt.savefig("figures/hist_exec_time.png")
plt.close()

# ==== 7. Ph√¢n ph·ªëi s·ªë d√≤ng ƒë∆∞·ª£c qu√©t ====
plt.figure(figsize=(8, 4))
sns.histplot(df['rows_examined'], bins=30, kde=True, color='salmon')
plt.title("Ph√¢n ph·ªëi s·ªë d√≤ng ƒë∆∞·ª£c qu√©t (rows_examined)")
plt.xlabel("rows_examined")
plt.ylabel("S·ªë l∆∞·ª£ng truy v·∫•n")
plt.tight_layout()
plt.savefig("figures/hist_rows_examined.png")
plt.close()

# ==== 8. Boxplot theo c√∫ ph√°p SQL ====
syntax_cols = ['has_like', 'has_group', 'has_join', 'has_order', 'has_limit', 'has_distinct']
for col in syntax_cols:
    if col in df.columns:
        plt.figure(figsize=(6, 4))
        sns.boxplot(data=df, x=col, y='exec_time_sec', palette="Set2")
        plt.title(f"·∫¢nh h∆∞·ªüng c·ªßa '{col}' ƒë·∫øn th·ªùi gian truy v·∫•n")
        plt.xlabel(col)
        plt.ylabel("Th·ªùi gian (gi√¢y)")
        plt.tight_layout()
        plt.savefig(f"figures/box_{col}.png")
        plt.close()

# ==== 9. Scatter plot: s·ªë d√≤ng qu√©t vs th·ªùi gian ====
plt.figure(figsize=(7, 5))
sns.scatterplot(data=df, x="rows_examined", y="exec_time_sec", hue="is_slow", palette="coolwarm")
plt.title("M·ªëi quan h·ªá gi·ªØa rows_examined v√† exec_time_sec")
plt.xlabel("rows_examined")
plt.ylabel("exec_time_sec")
plt.tight_layout()
plt.savefig("figures/scatter_rows_vs_time.png")
plt.close()

# ==== 10. Heatmap t∆∞∆°ng quan c√°c ƒë·∫∑c tr∆∞ng s·ªë ====
numeric_cols = ['exec_time_sec', 'rows_examined', 'uses_index', 'num_tables'] + [
    col for col in syntax_cols if col in df.columns
]
corr = df[numeric_cols].corr()

plt.figure(figsize=(10, 8))
sns.heatmap(corr, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("üîç Ma tr·∫≠n t∆∞∆°ng quan gi·ªØa c√°c ƒë·∫∑c tr∆∞ng")
plt.tight_layout()
plt.savefig("figures/heatmap_correlation.png")
plt.close()

# ==== 11. Ph√¢n ph·ªëi truy v·∫•n nhanh / ch·∫≠m ====
plt.figure(figsize=(5, 4))
sns.countplot(data=df, x="is_slow", palette="Set2")
plt.title("T·ªâ l·ªá truy v·∫•n nhanh v√† ch·∫≠m")
plt.xlabel("is_slow (0 = nhanh, 1 = ch·∫≠m)")
plt.ylabel("S·ªë l∆∞·ª£ng truy v·∫•n")
plt.tight_layout()
plt.savefig("figures/count_is_slow.png")
plt.close()

# ==== 12. Boxplot theo lo·∫°i truy c·∫≠p EXPLAIN.types ====
if "types" in df.columns:
    top_types = df['types'].value_counts().nlargest(10).index.tolist()
    df_types = df[df['types'].isin(top_types)].copy()

    plt.figure(figsize=(10, 5))
    sns.boxplot(data=df_types, x="types", y="exec_time_sec", palette="pastel")
    plt.xticks(rotation=45)
    plt.title("‚è± Th·ªùi gian truy v·∫•n theo types (EXPLAIN)")
    plt.tight_layout()
    plt.savefig("figures/box_types_exec_time.png")
    plt.close()

# ==== 13. Top 10 truy v·∫•n ch·∫≠m nh·∫•t ====
if "query_raw" in df.columns:
    print("\nüìõ Top 10 truy v·∫•n ch·∫≠m nh·∫•t:")
    top10 = df.sort_values("exec_time_sec", ascending=False).head(10)
    for i, row in top10.iterrows():
        print(f"- ({row['exec_time_sec']:.2f}s) {row['query_raw'][:120]}...")

    # Xu·∫•t ra file CSV
    top10.to_csv("figures/top10_slow_queries.csv", index=False)
    print("üìù ƒê√£ l∆∞u top 10 truy v·∫•n ch·∫≠m nh·∫•t v√†o: figures/top10_slow_queries.csv")
else:
    print("\nüìõ Thi·∫øu c·ªôt 'query_raw' ƒë·ªÉ hi·ªÉn th·ªã truy v·∫•n g·ªëc.")

# ==== 14. T·∫ßn su·∫•t t·ª´ kh√≥a SQL ph·ªï bi·∫øn (token t·ª´ query_raw) ====
if "query_raw" in df.columns:
    all_tokens = []
    for q in df["query_raw"]:
        tokens = re.findall(r'\b(select|from|join|where|group by|order by|limit|distinct|like)\b', q.lower())
        all_tokens.extend(tokens)

    keyword_counts = Counter(all_tokens).most_common(10)
    keywords, counts = zip(*keyword_counts)

    plt.figure(figsize=(8, 4))
    sns.barplot(x=list(keywords), y=list(counts), palette='viridis')
    plt.title("üîë Top t·ª´ kh√≥a SQL ph·ªï bi·∫øn nh·∫•t")
    plt.ylabel("S·ªë l·∫ßn xu·∫•t hi·ªán")
    plt.xlabel("T·ª´ kh√≥a")
    plt.tight_layout()
    plt.savefig("figures/keyword_frequency.png")
    plt.close()

# ==== 15. L∆∞u file m√¥ t·∫£ th·ªëng k√™ (CSV) ====
df.describe().to_csv("figures/statistics_summary.csv")
print("\nüìÑ ƒê√£ l∆∞u th·ªëng k√™ m√¥ t·∫£ t·∫°i: figures/statistics_summary.csv")

# ==== 16. K·∫øt th√∫c ====
print("\n‚úÖ ƒê√£ ho√†n t·∫•t ph√¢n t√≠ch log truy v·∫•n SQL. Bi·ªÉu ƒë·ªì l∆∞u t·∫°i th∆∞ m·ª•c 'figures/'")
